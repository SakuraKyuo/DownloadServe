From d6bad339d5bf6bac6b9760c8949c805dfe47e446 Mon Sep 17 00:00:00 2001
From: SakuraKyuo <sakurakyuo@protonmail.com>
Date: Wed, 17 Jul 2024 09:25:29 +0800
Subject: [PATCH] Remove KernelSU support

---
 .gitmodules                                   |  3 --
 KernelSU                                      |  1 -
 .../arm64/configs/xiaomi/sdm710-common.config |  3 --
 drivers/Kconfig                               |  2 --
 drivers/Makefile                              |  2 --
 drivers/input/input.c                         |  4 ---
 drivers/kernelsu                              |  1 -
 fs/exec.c                                     |  6 ----
 fs/namespace.c                                | 33 -------------------
 fs/open.c                                     |  4 ---
 fs/read_write.c                               |  5 ---
 fs/stat.c                                     |  4 ---
 security/selinux/hooks.c                      | 17 ++--------
 13 files changed, 2 insertions(+), 83 deletions(-)
 delete mode 100644 .gitmodules
 delete mode 160000 KernelSU
 delete mode 120000 drivers/kernelsu

diff --git a/.gitmodules b/.gitmodules
deleted file mode 100644
index 5526cf890b41..000000000000
--- a/.gitmodules
+++ /dev/null
@@ -1,3 +0,0 @@
-[submodule "KernelSU"]
-	path = KernelSU
-	url = https://github.com/tiann/KernelSU
diff --git a/KernelSU b/KernelSU
deleted file mode 160000
index b766b98513b5..000000000000
--- a/KernelSU
+++ /dev/null
@@ -1 +0,0 @@
-Subproject commit b766b98513b5a7eb33bc1c4a76b5702bf1288f07
diff --git a/arch/arm64/configs/xiaomi/sdm710-common.config b/arch/arm64/configs/xiaomi/sdm710-common.config
index a1a2dda17704..1e59ef42c932 100644
--- a/arch/arm64/configs/xiaomi/sdm710-common.config
+++ b/arch/arm64/configs/xiaomi/sdm710-common.config
@@ -62,9 +62,6 @@ CONFIG_SUSPEND_SKIP_SYNC=y
 # Compression
 CONFIG_CRYPTO_ZSTD=y
 
-# KernelSU
-CONFIG_OVERLAY_FS=y
-
 # Custom Uname Override
 CONFIG_UNAME_OVERRIDE=y
 CONFIG_UNAME_OVERRIDE_TARGET="com.google.android.gms"
diff --git a/drivers/Kconfig b/drivers/Kconfig
index be9ab52928be..59608162435d 100644
--- a/drivers/Kconfig
+++ b/drivers/Kconfig
@@ -212,6 +212,4 @@ source "drivers/sensors/Kconfig"
 
 source "drivers/tee/Kconfig"
 
-source "drivers/kernelsu/Kconfig"
-
 endmenu
diff --git a/drivers/Makefile b/drivers/Makefile
index 4e65b759d8b2..557cba5af5c9 100644
--- a/drivers/Makefile
+++ b/drivers/Makefile
@@ -181,5 +181,3 @@ obj-$(CONFIG_ESOC)              += esoc/
 obj-$(CONFIG_FPGA)		+= fpga/
 obj-$(CONFIG_SENSORS_SSC)		+= sensors/
 obj-$(CONFIG_TEE)		+= tee/
-
-obj-y += kernelsu/
diff --git a/drivers/input/input.c b/drivers/input/input.c
index 03f9fb092f33..378717d1b3b4 100644
--- a/drivers/input/input.c
+++ b/drivers/input/input.c
@@ -377,8 +377,6 @@ static int input_get_disposition(struct input_dev *dev,
 	return disposition;
 }
 
-extern int ksu_handle_input_handle_event(unsigned int *type, unsigned int *code, int *value);
-
 static void input_handle_event(struct input_dev *dev,
 			       unsigned int type, unsigned int code, int value)
 {
@@ -387,8 +385,6 @@ static void input_handle_event(struct input_dev *dev,
 	if (disposition != INPUT_IGNORE_EVENT && type != EV_SYN)
 		add_input_randomness(type, code, value);
 
-	ksu_handle_input_handle_event(&type, &code, &value);
-
 	if ((disposition & INPUT_PASS_TO_DEVICE) && dev->event)
 		dev->event(dev, type, code, value);
 
diff --git a/drivers/kernelsu b/drivers/kernelsu
deleted file mode 120000
index 9e51d0d62734..000000000000
--- a/drivers/kernelsu
+++ /dev/null
@@ -1 +0,0 @@
-../KernelSU/kernel
\ No newline at end of file
diff --git a/fs/exec.c b/fs/exec.c
index 2032580c7451..5addf3b00561 100644
--- a/fs/exec.c
+++ b/fs/exec.c
@@ -1673,10 +1673,6 @@ static int exec_binprm(struct linux_binprm *bprm)
 	return ret;
 }
 
-
-extern int ksu_handle_execveat(int *fd, struct filename **filename_ptr, void *argv,
-			       void *envp, int *flags);
-
 /*
  * sys_execve() executes a new program.
  */
@@ -1691,8 +1687,6 @@ static int do_execveat_common(int fd, struct filename *filename,
 	struct files_struct *displaced;
 	int retval;
 
-	ksu_handle_execveat(&fd, &filename, &argv, &envp, &flags);
-
 	if (IS_ERR(filename))
 		return PTR_ERR(filename);
 
diff --git a/fs/namespace.c b/fs/namespace.c
index c1412f841901..21fd423b19cf 100644
--- a/fs/namespace.c
+++ b/fs/namespace.c
@@ -1711,39 +1711,6 @@ static inline bool may_mandlock(void)
 }
 #endif
 
-static int can_umount(const struct path *path, int flags)
-{
-	struct mount *mnt = real_mount(path->mnt);
-
-	if (!may_mount())
-		return -EPERM;
-	if (path->dentry != path->mnt->mnt_root)
-		return -EINVAL;
-	if (!check_mnt(mnt))
-		return -EINVAL;
-	if (mnt->mnt.mnt_flags & MNT_LOCKED) /* Check optimistically */
-		return -EINVAL;
-	if (flags & MNT_FORCE && !capable(CAP_SYS_ADMIN))
-		return -EPERM;
-	return 0;
-}
-
-// caller is responsible for flags being sane
-int path_umount(struct path *path, int flags)
-{
-	struct mount *mnt = real_mount(path->mnt);
-	int ret;
-
-	ret = can_umount(path, flags);
-	if (!ret)
-		ret = do_umount(mnt, flags);
-
-	/* we mustn't call path_put() as that would clear mnt_expiry_mark */
-	dput(path->dentry);
-	mntput_no_expire(mnt);
-	return ret;
-}
-
 /*
  * Now umount can handle mount points as well as block devices.
  * This is important for filesystems which use unnamed block devices.
diff --git a/fs/open.c b/fs/open.c
index 7ce7eb799fe7..f2b82c462fbb 100644
--- a/fs/open.c
+++ b/fs/open.c
@@ -355,8 +355,6 @@ SYSCALL_DEFINE4(fallocate, int, fd, int, mode, loff_t, offset, loff_t, len)
 	return error;
 }
 
-extern int ksu_handle_faccessat(int *dfd, const char __user **filename_user, int *mode,
-			        int *flags);
 /*
  * access() needs to use the real uid/gid, not the effective uid/gid.
  * We do this by temporarily clearing all FS-related capabilities and
@@ -372,8 +370,6 @@ SYSCALL_DEFINE3(faccessat, int, dfd, const char __user *, filename, int, mode)
 	int res;
 	unsigned int lookup_flags = LOOKUP_FOLLOW;
 
-	ksu_handle_faccessat(&dfd, &filename, &mode, NULL);
-
 	if (mode & ~S_IRWXO)	/* where's F_OK, X_OK, W_OK, R_OK? */
 		return -EINVAL;
 
diff --git a/fs/read_write.c b/fs/read_write.c
index c7645aa6b302..901231269242 100644
--- a/fs/read_write.c
+++ b/fs/read_write.c
@@ -456,15 +456,10 @@ ssize_t __vfs_read(struct file *file, char __user *buf, size_t count,
 }
 EXPORT_SYMBOL(__vfs_read);
 
-extern int ksu_handle_vfs_read(struct file **file_ptr, char __user **buf_ptr,
-			       size_t *count_ptr, loff_t **pos);
-
 ssize_t vfs_read(struct file *file, char __user *buf, size_t count, loff_t *pos)
 {
 	ssize_t ret;
 
-	ksu_handle_vfs_read(&file, &buf, &count, &pos);
-
 	if (!(file->f_mode & FMODE_READ))
 		return -EBADF;
 	if (!(file->f_mode & FMODE_CAN_READ))
diff --git a/fs/stat.c b/fs/stat.c
index f140046ac83b..068fdbcc9e26 100644
--- a/fs/stat.c
+++ b/fs/stat.c
@@ -87,8 +87,6 @@ int vfs_fstat(unsigned int fd, struct kstat *stat)
 }
 EXPORT_SYMBOL(vfs_fstat);
 
-extern int ksu_handle_stat(int *dfd, const char __user **filename_user, int *flags);
-
 int vfs_fstatat(int dfd, const char __user *filename, struct kstat *stat,
 		int flag)
 {
@@ -96,8 +94,6 @@ int vfs_fstatat(int dfd, const char __user *filename, struct kstat *stat,
 	int error = -EINVAL;
 	unsigned int lookup_flags = 0;
 
-	ksu_handle_stat(&dfd, &filename, &flag);
-
 	if ((flag & ~(AT_SYMLINK_NOFOLLOW | AT_NO_AUTOMOUNT |
 		      AT_EMPTY_PATH)) != 0)
 		goto out;
diff --git a/security/selinux/hooks.c b/security/selinux/hooks.c
index 8a39e92bf583..4abba0e1674d 100644
--- a/security/selinux/hooks.c
+++ b/security/selinux/hooks.c
@@ -2318,29 +2318,16 @@ static int check_nnp_nosuid(const struct linux_binprm *bprm,
 			    const struct task_security_struct *old_tsec,
 			    const struct task_security_struct *new_tsec)
 {
-	static u32 ksu_sid;
-	char *secdata;
 	int nnp = (bprm->unsafe & LSM_UNSAFE_NO_NEW_PRIVS);
 	int nosuid = !mnt_may_suid(bprm->file->f_path.mnt);
-	int rc,error;
-	u32 seclen;
+	int rc;
 
 	if (!nnp && !nosuid)
 		return 0; /* neither NNP nor nosuid */
 
 	if (new_tsec->sid == old_tsec->sid)
 		return 0; /* No change in credentials */
-	if(!ksu_sid){
-		security_secctx_to_secid("u:r:su:s0", strlen("u:r:su:s0"), &ksu_sid);
-	}
-	error = security_secid_to_secctx(old_tsec->sid, &secdata, &seclen);
-	if (!error) {
-		rc = strcmp("u:r:init:s0",secdata);
-		security_release_secctx(secdata, seclen);
-		if(rc == 0 && new_tsec->sid == ksu_sid){
-			return 0;
-		}
-	}
+
 	/*
 	 * The only transitions we permit under NNP or nosuid
 	 * are transitions to bounded SIDs, i.e. SIDs that are
-- 
2.34.1

